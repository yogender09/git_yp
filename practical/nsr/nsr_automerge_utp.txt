$Id: nsr_automerge_utp.txt,v 1.8 2012/12/06 11:39:41 sseth Exp $                                                                                                                
 
        NSR: testing of Automerge functionality with NSR
	    RLI 16124 
								                                 
Unit test plan and results 
Author: Sameer Seth<sseth@juniper.net> 
S3.02.P05.T02
Copyright (C) 2008, Juniper Networks, Inc.
JUNIPER NETWORKS COMPANY CONFIDENTIAL
NOTICE: This document contains the proprietary and confidential
information of Juniper Networks, Inc., and must not be
distributed outside of the company without the
permission of Juniper Engineering.

1.  INTRODUCTION

This document contains the unit test plan and unit test results for 
RLI 16124: "TCP auto-merge support in NSR for short duration hold timers
for protocols (BGP, LDP) (kernel)".
This is the automerge functionality for NSR scaling scenarios.
PR 693599 - Tracking PR for RLI 16124

Functional spec:
sw-projects/os/nsr/nsr_automerge_func_spec.txt


Related CLI commands:

    - Enable non-stop routing. If no NSR tunables are configured, then default
      NSR parameters apply. These are listed at the end.
      
	"set routing-options nonstop-routing"


    - Configuring automerge tunables for NSR. (By default automerge is enabled)

	* Setting batch count. (By default batching is enabled)
	    "set routing-options nonstop-routing automerge batch count <count>"

	* Setting batch count adjustment strategy. If not set, none is default. 
	    "set routing-options nonstop-routing automerge batch adjust [exp | slow]"

	* Setting interval between batches in milliseconds.
	    "set routing-options nonstop-routing automerge batch interval <interval>"

	* Setting interval adjustment strategy between batches. If not set, no
	  adjustment is default
	    "set routing-options nonstop-routing automerge batch interval-adjust exp"
    
	* Disabling batching, i.e. all sessions merged in kernel at one go. This 
          must be explicitly configured and removes other batch tunables.
	    "set routing-options nonstop-routing automerge no-batch"

    - Disabling kernel automerge. This must be explicitly configured. It is
      exclusive to automerge tunables configuration.
	"set routing-options nonstop-routing no-automerge"
    
 
    - Default NSR parameters when nonstop-routing is enabled.
	* Automerge is enabled
	* Automerge batching is enabled
	* Automerge batch count = 500	
	* Automerge batch count adjustment strategy = slow
	* Automerge batch interval = 50ms
	* Automerge batch interval adjustment strategy = none

    - The "show nonstop-routing" command displays the configured status of  NSR
      and its parameters as well as some automerge statistics and state. An
      example is provided below

	    root@wfpro-mx1-b# run show nonstop-routing    
	    Nonstop Routing : Enabled
	      Automerge : Active 
	      Batching: Yes
	      Batch count: 500
	      Batch count adjust: Slow
	      Batch interval: 50 msec
	      Batch interval adjust: None
	      Automerge State: Ready
	      Sessions Processed: 0

	The last 2 entries provide the state of automerge.
		* Automerge State: Ready => ready for automerge
		                   In Progress => Kernel performing automerge after switchover
		                   Switchover Completed => Sessions merged after switchover

		* Sessions Processed: Count of sessions automerged


2.  SETUP

This test plan uses the following routers/ test equipment/ SW and HW
tools:

 +------------------+   +-------------------+        +-------------------+               +-------------------+
 |       RT1        |   |         R0        +--------+         R1        |               |         RT2       |
 |                  +---+      sisira       |        |     hemantha      +---------------+                   |
 |                  |   | 10.255.104.135    |        | 10.255.104.133    |               |                   |
 |                  |   |     (DUT0)        +--------+      (DUT1)       |               |                   |
 +------------------+   +-------------------+        +---------+---------+               +---------+---------+


 
   R0 (sisira)       mx480          11.3I20120123_1011_sseth
                     lo0.0          10.255.104.135       ABCD::10:255:104:135
     R0-R1_0:        ge-1/0/4                                      
     R0-R1_1:        ge-1/0/5                                      
     RT0-R0:         ge-1/0/6                                      

   R1 (hemantha)     mx240         11.3I20120123_1011_sseth 
                     lo0.0          10.255.104.133       ABCD::10:255:104:133
     R0-R1_0:        ge-1/0/4                                      
     R0-R1_1:        ge-1/0/5                                      
     RT0-R1:         ge-1/0/6                                      

   RT0 (interop-art1) rt             7.10                                                                                   
                     lo0.0                                         
     RT0-R0:         101/1                                         
     RT0-R1:         101/2                                         


Figure-1: RBGP test setup topology


2.1  R0 CONFIGURATION
======================

set interfaces ge-1/0/6 unit 0 family inet address 1.0.0.1/24
set interfaces ge-1/0/6 unit 0 family mpls
set routing-options router-id 10.255.104.135
set routing-options autonomous-system 2
set protocols mpls interface all
set protocols mpls interface fxp0.0 disable
set protocols bgp group to_RT1 type internal				<<<<< IBGP Session with RT1
set protocols bgp group to_RT1 local-address 10.255.104.135
set protocols bgp group to_RT1 family inet-vpn unicast
set protocols bgp group to_RT1 neighbor 10.255.1.1
set protocols ospf traffic-engineering
set protocols ospf area 0.0.0.0 interface all
set protocols ospf area 0.0.0.0 interface fxp0.0 disable
set protocols ldp interface all set protocols ldp interface fxp0.0 disable

set protocols bgp hold-time 30
set protocols bgp precision-timers
set interfaces ge-1/0/4 vlan-tagging

set interfaces ge-1/0/4 unit 0 vlan-id 1
set interfaces ge-1/0/4 unit 0 family inet address 10.0.0.1/24
set interfaces ge-1/0/4 unit 0 family mpls
set routing-instances vpn-a-0 instance-type vrf
set routing-instances vpn-a-0 interface ge-1/0/4.0
set routing-instances vpn-a-0 route-distinguisher 1:1
set routing-instances vpn-a-0 vrf-target target:1:1
set routing-instances vpn-a-0 protocols bgp hold-time 30
set routing-instances vpn-a-0 protocols bgp group to_asbr2 type external  	<<<<<<<< EBGP session for VRF#1
set routing-instances vpn-a-0 protocols bgp group to_asbr2 peer-as 3
set routing-instances vpn-a-0 protocols bgp group to_asbr2 neighbor 10.0.0.2

set interfaces ge-1/0/4 unit 1 vlan-id 2
set interfaces ge-1/0/4 unit 1 family inet address 10.0.1.1/24
set interfaces ge-1/0/4 unit 1 family mpls
set routing-instances vpn-a-1 instance-type vrf
set routing-instances vpn-a-1 interface ge-1/0/4.1
set routing-instances vpn-a-1 route-distinguisher 2:1
set routing-instances vpn-a-1 vrf-target target:2:1
set routing-instances vpn-a-1 protocols bgp hold-time 30
set routing-instances vpn-a-1 protocols bgp group to_asbr2 type external	<<<<<<<< EBGP session for VRF#1
set routing-instances vpn-a-1 protocols bgp group to_asbr2 peer-as 3
set routing-instances vpn-a-1 protocols bgp group to_asbr2 neighbor 10.0.1.2

2.2  R1 CONFIGURATION
=====================

set interfaces ge-1/0/6 unit 0 family inet address 2.0.0.1/24
set interfaces ge-1/0/6 unit 0 family mpls
set routing-options router-id 10.255.104.133
set routing-options autonomous-system 3
set protocols mpls interface all
set protocols mpls interface fxp0.0 disable
set protocols bgp group to_RT2 type internal				<<<<< IBGP Session with RT2
set protocols bgp group to_RT2 local-address 10.255.104.133
set protocols bgp group to_RT2 family inet-vpn unicast
set protocols bgp group to_RT2 neighbor 10.255.1.2
set protocols ospf traffic-engineering
set protocols ospf area 0.0.0.0 interface all
set protocols ospf area 0.0.0.0 interface fxp0.0 disable
set protocols ldp interface all
set protocols ldp interface fxp0.0 disable
set protocols bgp hold-time 30
set protocols bgp precision-timers
set interfaces ge-1/0/4 vlan-tagging

set interfaces ge-1/0/4 unit 0 vlan-id 1
set interfaces ge-1/0/4 unit 0 family inet address 10.0.0.2/24
set interfaces ge-1/0/4 unit 0 family mpls
set routing-instances vpn-a-0 instance-type vrf
set routing-instances vpn-a-0 interface ge-1/0/4.0
set routing-instances vpn-a-0 route-distinguisher 1:1
set routing-instances vpn-a-0 vrf-target target:1:1
set routing-instances vpn-a-0 protocols bgp hold-time 30
set routing-instances vpn-a-0 protocols bgp group to_asbr1 type external	<<<<<<<< EBGP session for VRF#1
set routing-instances vpn-a-0 protocols bgp group to_asbr1 peer-as 2
set routing-instances vpn-a-0 protocols bgp group to_asbr1 neighbor 10.0.0.1

set interfaces ge-1/0/4 unit 1 vlan-id 2
set interfaces ge-1/0/4 unit 1 family inet address 10.0.1.2/24
set interfaces ge-1/0/4 unit 1 family mpls
set routing-instances vpn-a-1 instance-type vrf
set routing-instances vpn-a-1 interface ge-1/0/4.1
set routing-instances vpn-a-1 route-distinguisher 2:1
set routing-instances vpn-a-1 vrf-target target:2:1
set routing-instances vpn-a-1 protocols bgp hold-time 30
set routing-instances vpn-a-1 protocols bgp group to_asbr1 type external	<<<<<<<< EBGP session for VRF#2
set routing-instances vpn-a-1 protocols bgp group to_asbr1 peer-as 2
set routing-instances vpn-a-1 protocols bgp group to_asbr1 neighbor 10.0.1.1


2.3  TOPOLOGY
=============

	 rt1 -------------------- R0 (asbr1) -------------------- R1 (asbr2) -------------------- rt2
	
	101/1 -------- (ge-1/0/6) sisira (ge-1/0/4) -------- (ge-1/0/4) hemantha (ge-1/0/6)----  101/2
	                           10.255.104.135		         10.255.104.133

2.4  SETUP DESCRIPTION
======================

	a) RT1 emulates 1 IBGP session with R0 (ge-1/0/6).
	b) RT1 simulates N(Variable) VPNs. 
	c) RT1 advertises 25 VPN-router per VPN.
	d) RT2 emulates 1 IBGP session with R1 (ge-1/0/6).
	e) RT2 simulates N(Variable)  VPNs (Remote sites to the VPNs configured on RT1). 
	f) RT2 advertises 25 VPN-router per VPN.
	g) Configured N routing-instances on R0 (ge-1/0/4). 
	h) Configured N routing-instances on R1 (ge-1/0/4). 
	i) Configured one EBGP session per each VRF between R0 and R1 (Total N EBGP sessions for N VRFs on R0 and R1). 

2.5 PURPOSE
===========

Purpose of the setup is to have N bgp sessions between two peers simulating N peers. 25 BGP VPN routes are
advertised per BGP connection. With this setup, we should be able to sustain all N bgp connections on
NSR switchover. Each NSR switchover of BGP connection involves cleanup in the user-space as well as kernel
space(backup->master). Once the socket is cleanedup from backup to master role, it can start sending out
BGP keepalives. In scaled setup, cleanup of first few BGP connections may eatup enough time such that the
othe bgp connection get delayed and are not able to send out keepalives in timely manner. This may cause
hold-time expiry of such BGP connection to expire at the other end. We are going to test NSR switchover with
and without automerge in the scaled setup as mentioned.

With automerge, we get to see improved performance such that we can scale the BGP sessions to much high
value with the hold-time values as low as 10 Secs.

Basically this topology simulates n-number of VPNs; each VPN has 2 CES and 1st CE behind RT1 and 2nd CE
behind RT2. In Each VPN, CE1 advertises 25 routes and CE2 advertises 25 routes. R0 and R1 acts as ASBRs
in 2 different ASes.  The RT loads 100K (2500 * 25 VPN Routes) VPN routes and it will take few hours
to load completely. RT announces all the VPN-Routes to the routers.

	a. Here one BGP session exists between sisira(R0) and RT#1 and one more BGP session exists between
   	Hemantha(R1) and RT#2.
	b. Between sisira and hemantha N-VRFs (per N-IFLs) are configured and one EBGP session is configured per VRF.
	c. RT1 advertises the 25 IPv4_VPN routes per VRF and for each VRF; Similarly RT2 advertises from the other end.


3.  FUNCTIONAL TEST CASES

We need to make sure that all the bgp connections are established between the two routers and NSR is
working fine. Run following commands to check this:

	a. In the below output we can see 4001 BGP connections on the master i.e., 2.5k between the two routers
   	sisira and Hemantha) and one connecito with the RT.

	{master}
	regress@sisira> show bgp summary | grep Establ | count
	Count: 4001 lines

	b. In the below output we can see number of routes learnt. This value will depend on number of vpn routes
	configured per VRF instance.

	{master}
	regress@sisira> show route table mpls.0                   

	mpls.0: 7983 destinations, 7983 routes (7983 active, 0 holddown, 0 hidden)
	+ = Active Route, - = Last Active, * = Both

	c. Also, we can check on the RT side once all the routes are advertised, there will be an indications.

	d. Once the setup is ready, we should verify if all the BGP sockets are replacated properly -

	netstat -p jsr | grep Handle

	The output should show same number on both the master and the backup as number of VRF instances configured.
	If we have configured 2.5k BGP instances, both the sides should show 2.5k handles allocated.

	e. Also, netstat -p jsr should be able to produce any errors encountered before switchover.
 
	f. Following syctls's should be set ion both master and backup for automerge to work:

	net.jsr.automerge_active = 1
	net.jsr.auto_merge_action = 1

	If net.jsr.auto_merge_action is set to zero, we should not see any automerge
	functionality active even if net.jsr.automerge_active is set to 1.

	g. we should verify if automerge kernel thread is running :

	ps -aux | grep jsr_jsm_thread

	the above shell output should give us the details of automerge kernel thread
	entries.
 

3.1  10 sec BGP hold-time
===========================

Case 1: for 10 sec BGP hold-timeout:(upto 2500 connections)

need to set following autmerge tunables on both master and backup :
    net.jsr.auto_merge_all: 0
    net.jsr.auto_merge_batch_count: 100
    net.jsr.auto_merge_exp: 2
    net.jsr.auto_merge_timeo: 50
    net.jsr.auto_merge_sleep_exp: 0


set routing-options nonstop-routing automerge batch count 100
set routing-options nonstop-routing automerge batch adjust exp
set routing-options nonstop-routing automerge batch interval 50


3.3  PERFORM NSR SWITCHOVER
===========================

Once the setup is ready with all the routes are updated to the routers and the above
tunables are verified on the routers, we are all set to perform NSR switchover on either
R0 or R1. After NSR switchover, we need to check following -


	a.  We need to check if any BGP session flapped on the peer. R0 and R1 are the peers
	in our setup. If we perform NSR switchover on R1 then R0 is our peer. From Peer's
	syslogs we can find out the number of BGP sessions that flapped. If any BGP session
	has flapped, we can see following lines -
 
	bgp_hold_timeout:3663: NOTIFICATION sent to 192.168.0.2 (External AS 2):
	code 4 (Hold Timer Expired Error), Reason: holdtime expired for 192.168.0.2
	(External AS 2), socket buffer sndcc: 0 ...hold timer 0

	if above line is reported on the peer, BGP sessions have flapped. Number
	of such flapes whould be reported. It means that test has failed.

	b.  following shell command should be run on master and backup to see if any
	jsr specific error has occured: 

	netstat -p jsr

	c.  following shell command should be run on both master and backup to verify if both
	have same count and the number matches with the values before switchover was performed:

	netstat -p jsr | gre Handle 

	if the number of handles on master and backup are not same OR they are different from
	what it was before NSR switchover, we have failed the test. This should be reported.
	Note: it takes some time(around 30 Secs - 1 min) for the numbers to settle down.

	c.  we should see how many merges are done by automerge module:

	sysctl net.jsr.auto_merge_batch_count

	Output of the above shell command should give us the number of merges done by the
	automerge module. Rest of the socket merges are issued by RPD. If this number is zero,
	it is a faulty condition. This should be reported as it means that automerge is
	non-functional.


If any of the error conditions are reported, we have failed the test. This should be reported. 
In case of failures, please provide following logs -

	a.)  output of "netstat -p jsr" on both master and backup where NSR switchover is performed.
	b.)  output of "netstat -na" on both master and backup where NSR switchover is performed.
	c.)  tcpdump of the BGP sessions on R0 and R1
	d.)  syslogs on both master and backup on R0 and R1(enable jsr logs for this)
	

3.4  TESTS TO PERFORME
=======================

We should try testing following scenario:

Case 1: Test min performance numbers are met. 
        500 sessions
        2000 sessions

Case 2: Test max number of sessions supported with 10s HT
        this should be 1K - 1.3K

Case 3: Test max number of sessions wiht 30s HT
        this should be 3k - 3.5K

Case 4: Enable/disable auto-merge feature 

In each iterations, we should be performing atleast 5-10 back-to-back NSR switchovers. 
cli commands to tune automrege tunables should not be tested as they will be fixed for each case.

3.4.1  ASROD test results with the private image
================================================

ASROD was performed on the private image with complete RLI changes and the results are good. Please
find the results are the following location -

http://systest.juniper.net/ti/webapp/dr/debug_dr/view/gen_tl9000_report.mhtml?result_id=26145&trans=remove

3.5  THE TESTED & EXPECTED RESULTS
==================================

a) No sessions should flap
b) Above mentioned number of sessions are sustanined over NSR switchover. 


4.  BOUNDARY TEST CASES

{As necessary.  As with functional tests but for boundary/negative
tests.}
@@@@ Define and test what should happen when a switchover occurs
and we see errors/bgp session flaps.

4.1: perform a switchover before replication is complete

4.2: perform a switchover before all the routes are advertised to R0/R1.

5.  GRES TEST CASES

This feature does not impact GRES functionality.

6. TX TEST CASES

This feature is supported on MX platform.

All the test cases in this document must succeed, if tested on TX
platform.

7.  REGRESSION TEST CASES

{As necessary.  As with functional tests but for regression tests.
Include references to regression requests, who is performing them,
etc.}

8.  INTEROP TEST CASES
None.

9.  MIGRATION & COMPATIBILITY TEST CASES
None.

10.  TEST COVERAGE REMAINING

10.1 Test with virtual routers and/or multiple rpds.

11.  DEFECTS REMAINING

{List PRs filed at dev complete for test failures from this plan
which were not fixed by dev complete.}
@@@@ No PRs open

11.1. Occasional rpd crashes during test cases. this may happen because
of improper error handling because of the automerge functionality. Needs
to be fixed.

11.2. With high number of bgp connections, we may get to see around 10 - 15 BGP session
flaps sometimes in back-to-back switchover. We need to adjust automerge tunables
in such case. Permanent solution is to make automerge thread run at higher priority
level and to send out first keep-alive for the session from the kernel in automerge
module.

