                        Proposed Solution for TCP timestmap synchronization
                                (PR 64422)
                        ===================================================

The proposed approach for TCP timestamp option synchronization:

- Master RE periodically synchronizes its current ticks with the backup RE.
Periodic interval is set to 5 seconds.

- The backup RE maintains a global delta. The delta is calculated using the
following formula:
        global_delta = (master RE current ticks - backup RE
  current ticks + constant_val)
  
  constant_val is currently set to 2 seconds. This is a conservative value to
  account for the delay in transit.

- In the tcpcb structure for each socket a new field is maintained that stores
the per socket delta. This per socket delta will be added to the current
ticks value in cases where the ticks value from old master needs to be used
instead of new master's current ticks value. This will be used to satisfy the
requirement of monotonically increasing timestamps for a tcp connection.

   per socket delta is synced to the secondary RE when the L4 protocol state is
replicated for each socket by the PSRM layer. Also master RE's current ticks
value will be replicated. This is needed to update the per socket delta. Earlier
the plan was to update the per socket delta only when the replicated socket is
merged after failover. But per socket delta is also needed for RTT estimation
which happens on tcp_input (See function tcp_xmit_timer in tcp_input.c). When
timestamp option is enabled rtt is calculated using ticks - ts_ecr. Since ts_ecr
is the echoed value of master RE's current ticks value, per socket delta
has to be added to the current ticks value on secondary RE to get the correct 
value.

Here is the proposed calculation when the protocol state replication message is 
received on back up RE:
        1. copy per socket delta to the tcpcb.
                tp->jsr_per_sock_delta = psrm_msg->jsr_per_sock_delta
                
        2. use the current ticks value received from master RE to update init 
        delta b/w master and backup RE.
                tp->init_delta = 
                  cur master ticks (from PSRM msg) - cur backup ticks.

        3. add init delta to per sock delta.
                tp->jsr_per_sock_delta += tp->init_delta

  when the socket is merged after failover update the per sock delta using the 
  following formula :
                tp->jsr_per_sock_delta += (global_delta - tp->init_delta).
        

- Some more fields in tcpcb will be replicated in PSRM. All these values get
updated based on each input packet or are intialized when the socket is created
and are used later. These are: 

  t_starttime  /* time connection was established */
  - intialized when the connection state changes from SYN-RECEIVED  ->
  ESTABLISHED or SYN-RECEIVED -> FIN-WAIT-1. Since the connections are
  replicated only in ESTABLISHED state this value should also be replicated as
  the connection can continue to live after failover and start_time is used in
  some calculations.

  ts_recent /* timestamp echo data */ 
  - peer's timestamp echo data from the last valid segment received.

- All the outgoing tcp segments will use ticks + per socket delta to fill up the
timestamp value in tcp header.
       ts_val = ticks + tp->jsr_per_sock_delta

This delta will be zero for non-replicated sockets and for connections
established by the current master RE.

Here is an example showing the calculation of global and per socket delta and
their usage in the outgoing TCP segments:

Glossary of terms
=================
PRE0    -       Peer RE0
si      -       socket i
sirsn   -       receive snoop socket
sissn   -       send snoop socket
tsval   -       current timestamp value

There is a TCP socket (s1 <-----> s1p) between RE0 of the router with NSR enabled and peer RE0. 

Time T1:
========

At time T1 (after system bringup) RE0 is the master and RE1 the backup. TCP
session s1 is established between master's RE0 and peer RE0.  Global delta and
per sock delta on RE0 is 0. So the timestamp value on outgoing segments is same
as the ticks. The connection is replicated to secondary RE1. The current value
of ticks on RE1 is 100 and RE0 is 500. So the current global delta is 400. The
PSRM synchronizes L4 protocol state. The current per socket delta (0) and
current timestamp (400) is replicated as part of this. Figure below shows how
the per sock delta and init delta are initialized on RE 1.

RE0:                             RE0                PRE0                
ticks --> 500                    s1  <------------> s1p (peer)          
global delta = 0                 per sock delta = 0              
per sock delta = 0       
tsval = 500 + 0 (outgoing tcp segment)
(ticks + per sock delta)
ts_recent = 400 

RE1: 
ticks --> 100                    s1rsn s1ssn
global delta = 500 - 100 = 400   
per sock delta = 0
init delta = 400
per sock delta += init delta = 400

Time T2:
========

Failover happens at time T2 and RE1 takes over mastership. The sockets on RE1
are merged. At this point current timestamp on RE0 was 650 and RE1 was 225.
Global delta at this time is 425. The per sock delta is obtained by adding the
difference of global delta and delta to the current value of per sock delta. See below the calculations for new per sock delta:

RE0: 
ticks --> 650     

RE1:
ticks --> 225   
                                RE1                              PRE0   
                                s1m(merged sock)  <------------> s1p
                                tsval = 225+425 (outgoing tcp segment)
global delta = 425 
per sock init delta = 400
per sock delta = 400 + (global delta - init delta)
               = 425
Time T3:
========

RE0 comes up as backup and socket replication is enabled on s1. Global delta,
    current delta and per socket delta is now updated on the new backup. The per
    socket delta is calculated by adding current delta to the per socket delta:

RE0:
ticks --> 10                    s1rsn s1ssn
global delta = 500 - 10 = 490   
per sock init delta = 490
per sock delta = 425 + 490 = 915

RE1:
ticks --> 500                   RE1                              PRE0   
global delta = 0                s1m(merged sock)  <------------> s1p
                                per sock delta = 425
                                tsval = 500+425 (outgoing tcp segment)

Time T4:
========

Now a new tcp socket session s2 is established between RE1 and the peer at time
2000. The global delta at this time is 500. per sock delta for replicated socket
s1 is 915. Per socket global delta for replicated socket s2 is 500. init delta
for s1 is 490 and s2 is 500. On RE1 the per sock delta for s1 is 425 but for s2
it will be zero as s2 is opened at T4 on RE1.

RE0:
ticks --> 2000                  s1rsn s1ssn
global delta = 500              per sock delta for s1 = 915
                                per sock init delta = 490
                                s2rsn s2ssn
                                per sock delta for s2 = 500
                                per sock init delta = 500

RE1:
ticks --> 2500                  RE1                            PRE0
                                s1m(merged sock)  <----------> s1p
                                tsval = 2500+425 (outgoing tcp segment)
                                
                                s2                <----------> s2p
                                tsval = 2500+0 (outgoing tcp segment)

Time T5:
========

Failover happened. RE0 becomes the master. The per socket delta for s1 after
socket merge will be 925 (see calculations below). While for s2 the delta is
500.

RE0:                            RE0                     PRE0    
ticks --> 3000                  s1m     <----------->   s1p
global delta = 500              per sock delta for s1 = 915 + (500 - 490) = 925
                                tsval = 3000 + 925 (outgoing tcp segment)       

                                s2m     <----------->   s2p
                                per sock delta for s2 = 500 + (500 - 500) = 500
                                tsval = 3000 + 500 (outgoing TCP segment)

RE1:
ticks --> 3500
global delta = 0.
