$Id: l2ckt-vpls-funcspec.txt,v 1.7 2008/03/03 19:36:43 wlin Exp $

S3.02.P05.T01

	NSR for L2CKT / LDP-VPLS Functional Specification
	
		    Wen Lin (wlin@juniper.net)


Copyright (C) 2007, Juniper Networks, Inc.

NOTICE: This document contains proprietary and confidential
information of Juniper Networks, Inc. and must not be distributed
outside of the company without the permission of Juniper Networks
engineering.


1.  INTRODUCTION

This document covers Non Stop Routing (NSR) for Layer 2 circuit and 
LDP based VPLS. It is targeted for release 9.2.

In this document if it is not explicitly specified, the VPLS means the 
LDP-based VPLS and L2CKT is the Layer 2 circuit functions provided in the 
JUNOS.



1.1 Goal:

- To achieve minimum traffic loss on the data plane when the master RE fails 
  over to the standby RE.

- Preserves the label allocated by the L2CKT/VPLS component on successful 
 switch-over. The standby RE should track the label advertised by L2CKT/VPLS
 on the primary RE and also use the same label after the switch-over.

- To minimize the state replication on the standby RE. Instead, the standby
  should regenerate state if possible. On successful swith-over, there should 
  be no changes on the route/next-hop. Use the same dynamic interface created 
  for VPLS on successful switch-over.
  
- The window of the de-synchronization on the control plane for L2CKT/VPLS between 
  the master and standby REs should keep at minimum.


1.2 Non-Goal:

- To support NSR for L2CKT/VPLS features introduced after release 9.0. 

- To support NSR for L2CKT/VPLS before the configuration is successfully 
  synchronized from the master RE to the standby RE or NSR on back to back 
  failover.

- To support NSR for L2CKT/VPLS before the LDP finishes the inital sync state
  since the NSR of L2CKT/VPLS heavily relies on the NSR of LDP.

- To achieves absolutely no traffic loss on the data plane under any 
  circumstance upon a master to a standby switch-over.


1.3 Related RLIs and PRs:

NPI Program: 326 JunOS Non-stop Routing (NSR)
RLI 2724 - NSR: L2 Circuit stateful replication
RLI 5131 - NSR: LDP-VPLS stateful replication
PR 103293 - Tracking PR for RLI 2724
PR 103294 - Tracking PR for RLI 5131


2.  FUNCTIONALITY

In this section of this functional spec, we will go over what need to be 
replicated on the standby RE for the support of NSR for L2CKT/VPLS. For 
the detailed design implementation as to how things are getting replicated
or state getting recovered on the standby RE for L2CKT/VPLS are specified in 
the corresponding design spec.  Also, please see design specification for 
the discussion of various race conditions and how L2CKT/VPLS recovers the 
mismatch during or after the switch-over.


2.1 Things need to be replicated on Standby RE

There are a couple of important factors for L2CKT/VPLS that helps us 
determine what need to be replicated on the standby RE and which method that 
we are going to use to replicate these information.

a) On the control plane, the L2CKT/VPLS component does not communicate 
to its neighbor on the remote PE directly. Instead, the extended LDP 
signaling protocol is used to set up and maintain pseudo wire with its 
remote peer. The PW label bindings are distributed in the LDP downstream 
unsolicited mode (Currently only PWid FEC element with PWid of 128 is 
supported.) 

Therefore, there is no need to maintain different neighbor states in the
in the L2CKT/VPLS component, instead it is all done in LDP. Because of LDP NSR, 
the target LDP neighbor session established for the LDP/VPLS neighbor is already 
replicated on the standby RE and it is also maintained across the switch-over.

b) The standby RE will run L2CKT/VPLS independently from the master RE. From
the NSR's perspective for L2CKT/VPLS: 

- Neighbor for a L2CKT/VPLS is statically configured at the local site, the 
standby processes the configuration the same way as it does on a master 
RE.  From 8.4 and forward, it is a requirement to use "commit sync" when NSR
is enabled. Every time a configuration is committed on the master RE. It is 
assumed that the window of configuration mismatch between the master and 
standby RE is small. The mismatch of configuration is mainly caused by the 
fact that master and standby RE are run independently of each other and it 
also takes time to sync the CLI configuration from the master to the standby 
RE.

- The standby RE will add/delete route(s) to the l2circui.0  and mpls.0 table
the same way as it does on the master RE.

- There is also enough information for the standby RE to regenerate 
vc interface state on its own and there is no need to use mirror data for the 
vc interface state.

c) There is no statistics information maintained in the L2CTK/VPLS, so there
is no need to replicate statistic data from the master RE or to recover from 
the kernel.


With that being said, in order to achieve minimum or no traffic loss and 
avoid unnecessary route / nexthop change during and after the switch-over, 
for each neighbor with a specified virtual-circuit id or VPLS id, the standby 
RE needs to replicate the following dynamic information allocated or created 
on the master RE:

- The dynamic VT or LSI interface and subunit created for VPLS.

- The label for the PW label binding that the local L2CKT/VPLS 
advertises to the neighbor on the remote PE. 

The standby RE also needs to know the following information:

- The PW label binding advertised by its remote neighbors. 


2.1.1 IFL Replication

This is only applies to VPLS for the dynamic VT or LSI interface created for
VPLS. It is achieved by the kernel replication as the VT or LSI interface is
already replicated today by the kernel. For detail please refer to the design 
specification.


2.1.2 Label Replication for Label Advertised by the Local PE.

Because of the LDP NSR, this label information is already available in the LDP
on the standby RE. The L2CKT/VPLS component recovers the label from the LDP.
For detail, please refer to the corresponding design specification.


2.1.3 Standby RE Learns Label advertised by its Remote Neighbor

On the standby RE, the L2CKT/VPLS gets this label information from the LDP 
through the route flash. For detail please refer to the corresponding design.


2.2 CLI 

There will be no new user visible configuration or operational command 
introduced for this feature. Also no changes is made to the existing 
configuration or operational commands or the outputs of any operational commands.


2.2.1 Enable NSR for L2CKT/VPLS

Similar to other NSR capable protocols under RPD, we use the global NSR 
configuration to enable NSR for L2CKT/VPLS - i.e. we must enable both non-stop 
routing and GRES:

routing-option nonstop-routing

chassis redundancy graceful-restart


2.2.2 Trace Flags

To enable the trace for NSR, turn on the global trace option provided under
routing-option hierarchy:

routing-option traceoptions flag nsr-synchronization.  

This is used to trace NSR synchronization event. For L2CKT/VPLS, it traces
the replication of IFL events from the kernel for the dynamic VT/LSI 
interface created for the VPLS. It also traces the LDP out label replication 
from the LDP outlib on the standby RE.


2.2.3 Configuration and Operational Commands
 
However, to help debugging the IFL and label replication states on the standby 
RE, the following hidden operational commands are added. They are used to unveil 
the IFL and label replication entry/state on the standby RE.

show vpls replication dynamic-interface [bgp | ldp]
+show vpls replication label ldp
+show l2ckt replication label ldp

A opttional key word "bgp" or "ldp" is added for the existing 
"show vpls replication dynamic-interface" command to display IFL repository 
entry created for BGP-VPLS or LDP-VPLS respectively.

The output display for each command mentioned above are as follow:

root@grolsch# run show vpls replication dynamic-interface ldp    

Instance: vplsa
VPLS-id    Neighbor          Interface             Label     State      Mgroup
10         30.30.30.1        vt-0/1/0.1048557      800257    InUse      0   
10         40.40.40.1        vt-0/1/0.1048556      800256    NotInUse   0

Instance: vplsb
VPLS-id    Neighbor          Interface             Label     State      Mgroup
20         70.70.70.1        vt-0/1/0.1048580      800259    InUse      0   
20         80.80.80.1        vt-0/1/0.1048579      800258    InUse      0

The output of this command displays the dynamic interface replicated on the 
standby RE. On standby, the dynamic vt/lsi interface are recovered from the 
kernel. This command only applies to VPLS as there is no dynamic vt/lsi 
created for the L2CKT.

Even though there is label information displayed here, however for NSR
the labels are recovered from LDP outlib binding on the standby RE. It is not 
recovered from the kernel, but the two should match.

Possible values for the "State" of each IFL repository entry and its 
associated meaning are:

NotInUse - The VPLS interface and its subunit is not resurrected on the 
standy RE for the corresponding neighbor and vc id.

Inuse - For a given neighbor and vc id, a matching VPLS interface is created 
on the standby RE and it resurrects the same subunit space as it is used on 
the master RE.

Mismatch - There must be a mismatch in the type of dynamic interface between
a master RE and standby RE. For example, one might be a VT interface and the 
other a LSI interface, so the subunit is not getting resurrected for now.

If no "bgp" or "ldp" keyword is provided, it displays all the BGP-VPLS and
LDP-VPLS dynamic interfaces replicated on the stanby RE.

root@grolsch> show vpls replication dynamic-interface        
Instance   Interface               Site ID       Index   Label   State   Mgroup
                                 Local Remote
3          vt-0/1/0.1048578      2     1         89              InUse     0   

Instance: red
VPLS-id    Neighbor          Interface             Label     State      Mgroup
20         70.70.70.1        vt-0/1/0.1048577      800256    InUse      0   
20         80.80.80.1        vt-0/1/0.1048576      800257    InUse      0   

{backup}


2) regress@shiner>show vpls replication label ldp

root@grolsch# run show vpls replication label ldp                
Instance: vplsa
Neighbor          vpls-id    Label     State   
30.30.30.1        10         800257    InUse   
40.40.40.1        10         800256    InUse 

Instance: vplsb
Neighbor          vpls-id    Label     State   
70.70.70.1        20         800259    InUse   
80.80.80.1        20         800258    InUse 

2) regress@shiner>show l2ckt replication label ldp

Neighbor   vc-id	Label 		State
1.1.1.1    100		100000 		Inuse
2.2.2.2    200		100016		Inuse

The outputs of these commands display the label repository entry/state 
created on the standby RE from the label binding information in the LDP outlib 
binding on the standby RE. The standby label repository is common for both L2CKT
and VPLS and it is built when the label information is passed by LDP.

Possible values for the "State" of each entry are:

NotInUse - The label associated with the specified neighbor and vc id is not
resurrected on the standy RE.

InUse - The label is resurrected for L2CKT/VPLS and it is currently used as 
an in-coming label to the local PE.

Mismatch - The label is not getting used because the label is intended for
a different type of dynamic interface for VPLS as label for VT and LSI 
interfaces comes from two different label ranges.  This may essentially imply
there is a mismatch of VT and LSI interface type between master and standby 
RE. This does not apply to the labels for the L2CKT.

Release - The local L2CKT/VPLS previously used this label as in-coming label
but it is no longer does.


We may also use other existing hidden commands to debug the L2CKT/VPLS  
on the standby RE are:

- show ldp replication session
- show ldp replication neighbor
- show ldp database extensive

This session command can be used to check out the state of a LDP targeted 
session established for the L2CKT/VPLS neighbor on the remote PE.

The neighbor command can be used to check out the state of the targeted 
neighbor of L2CKT/VPLS.


2.3 Assumptions

The NSR for L2CKT and VPLS are heavily rely on the NSR functionalities
provided by LDP. It also rely on the GRES support for VPLS in the kennel. 
Both of these two features are already supported today.

3.  CAVEATS

None.

4.  OTHER REQUIREMENTS

None.

[=== Everything from here down is internal (white box) documentation
and should not be documented or related to customers without a
specific need. (e.g. customer support workarounds for critical issues,
performance targets where the performance is the feature, etc.) ===]


5.  IMPLEMENTATION DETAILS

Please see the design specification for NSR for L2CKT and LDP-VPLS.


6.  PERFORMANCE


6.1.  Performance Related Resources


6.2.  Target Performance


7.  COMPATIBILITY ISSUES


8.  SECURITY ISSUES


9.  Graceful RE Switchover (GRES), Hobson Impact


10.  SDK Impact


11.  NOTES


12.  GLOSSARY

L2CKT - L2 Circuit

NSR - Non Stop Routing

RE - Routing Engine

VPLS - Virtual Private LAN Service


12.  REVIEW COMMENTS

{We use the audit trail of the RLI tracking PR to record review comments,
so please include a pointer to the pr here. If the spec review is done
via email, the owner of the spec will send it out for comments with
"bugs@juniper.net" included on the To: or CC: line and the Subject:
containing "<catagory>/<tracking pr number>:", as shown below:

Subject: PR 12345: Code review for new frombitz feature

More info on valid Subject: line formats can be found ati:
http://www-in.juniper.net/useful_info/gnats-faq.html
All the reviewers have to do is reply to the email with their review 
comments, making sure "bugs@juniper.net" is in the To: or CC: and their 
comments will be automagically archived to the pr. In the case of a meeting 
to review the specs, the owner will add the review comments to the audit
trail of the tracking pr themselves. Review comments would include who
attended the meeting and the input provided by the reviewers.

When the owner updates the spec in cvs, they include the changes
made and the tracking pr number in the commit log, something like:

   pr: 12345
   Comments:

   Updates from spec review:

   - add description of ucode changes (jdoe)
   - remove the "annoy user" config command (bsmith)
}

13. REFERENCES

[NSR]	Non-Stop Routing (NSR) - Functional specification
	sw-projects/os/nsr/software_spec_3083.txt

[L2VPN-VPLS]  sw-projects/os/nsr/l2vpn-vpls-funspec.txt

[LDP-NSR]  sw-project/os/nsr/ldp-nsr-implementation.txt


