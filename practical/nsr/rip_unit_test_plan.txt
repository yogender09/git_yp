		RIP and RIPng NSR stateful replication unit test plan

-author: Antoine Klink
-email: antoine@juniper.net

Copyright (C) 2007, Juniper Networks, Inc.

NOTICE: This document contains the proprietary and confidential
information of Juniper Networks, Inc., and must not be
distributed outside of the company without the
permission of Juniper Engineering.

1. INTRODUCTION
----------------
This is a unit test plan for RLI 2725 (Tracking PR 71150). The feature 
consists of providing NSR support for RIPv2 and RIPng. The functional specs 
for this feature can be found in sw-projects/os/nsr/rip_software_spec.txt

2. SETUP
--------
In order to test NSR replication in RIPv2 or RIPng a dual RE box is needed; 
it will be the device under test and i will refer to it in the remainder
of this document as the DUT. 
Note that all the basic tests will be the same for RIPv2 and for RIPng; 
thus I will use 'RIP' in reference to both of them in those tests and 
when both protocols are running they will be referred to as RIPv2 and RIPng.

The following basic setup is needed to test the functionality of RIP/NSR:

A) R1-------DUT---------R2
       RIP       RIP    

The configuration in all tests using setup is the same:
The DUT is a RIP neighbor for both R1 and R2 (R1 and R2 are not neighbors 
though as is shown in the above sketch). R1 is advertising routes in RIP to 
the DUT and DUT is advertising those routes + some static routes to R2. T
hese static routes are also advertised to R1.
   
The following setup is used to test for multiple RIP instances:

             R3
             | RIP
      RIP    |
B) R1-------DUT---------R2
   |         |    RIP    
   |_________|
      RIPx

In addition to the configuration described in setup A another routing instance 
is configured on the DUT (RIPx) and 2 rip neighbors are set up in it to 
communicate with R1 and R3 (an extra box). R1 doesn't necesarely need to have
another routing instance and can just export the same routes it does in 
setup to RIPx on the DUT. The DUT will export these routes as well as some 
static routes to R3.

3. FUNCTIONAL TEST CASES
------------------------
Some notes on all tests:

-The main success criteria for all tests is that we see the same RIP routes 
on the standby as on the primary  and this of course after the standby gets
an update from every RIP neighbor on the replicated socket. 
Important Note: If any RIP routes are already expiring or in holddown state on 
the primary before replication comes UP, they won't be seen on the standby 
after NSR is activated and replication is ON unless the DUT gets updates 
for these routes.

-Whenever a configuration or activation is specified on the DUT it is 
supposed to be performed on the primary and followed by a 'commit synchronize'.
Test cases involving the user mistakenly making changes on primary or
secondary alone are handled in section 4 under boundary test cases.

-When Activate NSR is specified as a test step it means that  
"chassis redundancy graceful-switchover" needs to be active too alongside
"routing-options nonstop-routing".

-When replication comes UP for RIP requests are sent to all neighbors 
so that standby gets UPDATES from them ASAP. This means that standby
should learn the routes immediately after replication is ON. This behavior 
wont be observed before PR 96306 is fixed (see caveats in the spec). 
Until then the standby will learn the routes from the neighbors when regular 
UPDATES are received.

-At the end of every test I specify some variants of it that will have 
the same success criteria as the actual test.

A) Socket replication test
--------------------------
   Goal: The goal of this test is to make sure that the RIP IO socket
	 is replicated when nonstop routing is ON.
   Test Specific Setup: Setup A
   Test Steps:
	1. RIP is active on both R1 and R2
	2. Activate RIP on the DUT
	3. Activate NSR
   Success Criteria:
   - RIP routes are learned on Standby RE.
   - "Master RE: Socket replication ON for RIP" is seen in tracing.
   Result: Pass.
   
   Variants: -Step 3 is performed before step 2.
	     -Steps 2 and 3 are performed together.
	     -Deactivate RIP and then reactivate after step 3. Note that 
	      after deactivating RIP the rip_mirror_handle structures
	      on both primary and secondary should get cleaned up and this 
	      can be verified by issuing:
	      "show task memory detail | match rip" and looking for 'RIP
	      mirror handle'.

B) Restart routing test
-----------------------
   Goal: To show that after issuing a 'restart routing' on primary or 
	 standby replication comes back up.
   Test Specific Setup: Setup A
   Test Steps:
	1. After step 3 of Test A issue 'restart routing' on the DUT's primary.
   Success Criteria:
   - RIP routes are learned on Standby RE and their age should start 
     increasing from 0 since the old routes should be deleted when 
     the primary restarts.
   - "Master RE: Socket replication ON for RIP" is seen in tracing.
   Result: Pass.	     

   Variants: -issue 'restart routing' on standby. Routes on primary will
	      obviosuly have the same age as before restarting routing on
	      standby.
	     -Replication should also recover after deactivating 
	      nonstop-routing and then reactivating it on the DUT.(similarly
	      to 'restart routing' on the standby) Fixing PR 96161 should 
	      allow for this to succeed.

C) Switchover processing
-----------------------
   Goal: To show that on a mastership switch the standby will pick up from
	 where the old primary stops in terms of neighbors RIP routes 
	 never expiring.
   Test Specific Setup: Setup A
   Test Steps:
	1. After step 3 of Test A issue "request chassis routing-engine master
	   switch no-confirm" on the DUT's primary.
   Success Criteria:
   - DUT keeps sending UPDATES from new primary.
   - RIP routesadvertised from DUT on  R1 and R2 do not expire (age must
     not reset to 0).
   - Tracing on new primary shows that socket replication is ON.
   - Standby (old primary) learns routes through replicatoin after restarting.
   Result: Pass.	     

   Variants: - "request chassis routing-engine master switch no-confirm" 
	       can be issued on the DUT's secondary.

D) Multiple instances
---------------------
   Goal: To show that having multiple instances of RIP on the DUT works 
	 with NSR.
   Test Specific Setup: Setup B
   Test Steps:
	1. Activate RIP on R1, R2 and R3
	2. Activate RIP on the DUT in both intances (main and RIPx).
	3. Activate NSR
	4. "request chassis routing-engine master switch no-confirm" on the 
	   DUT's primary.
   Success Criteria:
   - After step 3, Tracing shows that replication is ON and Routes are learned 
     on standby in both instances
   - After Step 4, routes on all routers (especially R3 which is connected
     to the RIPx instance) do not expire (age does not go to 0) and all 
     3 routers keep getting updates from the new primary. Also replication
     should come UP and the new standby learn all routes.
   Result: Pass.	     

E) RIPv2 and Ripng running together
-----------------------------------
   Goal: show that both RIPv2 and RIPng can run together smoothly with NSR ON.
   Test Specific Setup: Setup A
   Test Steps:
	1. Configure both Ripv2 and Ripng on all routers (same topology for 
	  both)
	2. Perform tests A B and C.
   Success Criteria:
   - Same as for above tests.
   Result: Pass.
   
   Variants: - Use setup B with both RIPv2 and RIPng to show that they
	     can run with multiple instances and NSR.

F) Routes in holddown state and expiring routes
-----------------------------------------------
   Goal: show that if after replication is ON routes expire and/or go into 
	 holddown on the primary they will also be in that state on the 
	 standby. This state should also be conserved through a switchover.
   Test Specific Setup: Setup A	 
   Test Steps:
	1. Perform steps in test A.
	2. Delete routes that are being exported on R1.
	3. After 10 secs issue "request chassis routing-engine master
	   switch no-confirm" on the DUT's primary.
	4. Restore routes that were deleted on R1.   
   Success Criteria:
   - After step 2 the routes that were being exported from R1 to the DUT
   should show in holddown on both primary and standby.
   - After step 3 the routes will still show as being in holddown on the
   new primary but will not be seen on the new standby since it will
   restart and never get these routes in an UPDATE from R1.
   -Afters step 4 both master and standby will should have the routes 
   that were previously deleted.
   Result: Pass.
   
   Variants: - Replace actions in step 2 above by deactivating RIP on R1.
	     This will cause routes on DUT to start expiring and not 
	     go directly in holddown. Same behavior should be observed after 
	     switchover and reactivating RIP.

G) Scaling tests
----------------
   Goal: Provide some parameters that should be scaled as part of testing 
   for this test.
   Test Specific Setup: Setup A
   Test steps:
	1. Do test E (Ripv2 and Ripng together) while:
	   - increasing number of RIPv2 and RIPng neighbors
	   - increasing number of routes being exported from R1 and R2 in both
	     Ripv2 and Ripng
	   - decreasing update interval on all neighbors so that frequency 
	     and number of received updates increases.
	2. Make sure to run tests for long periods of time and perform 
	   switchovers
  Success Criteria:
   - Same as for above tests.
   Result: Pass.
	 
4. BOUNDARY TEST CASES
----------------------
The following test cases will handle the possibility of having a different 
configuration on the standby than the one on the primary. The succes of these
test cases is tied to fixing PR96166. It should be noted that such cases are
all considered mis-configurations and handling them just means not crashing
when they happen and being able to restore state when the user rectifies his
mistake.

A) RIP deactivated on standby only
----------------------------------
    Goal: Show that if user deactivates RIP on standby only and then 
	  re-activates it, replication state will be recovered.
    Test Specific Setup: Setup A
    Test Steps:
	1. Perform the 3 steps in section 2 test A
	2. Deactivate RIP on standby and 'commit' on standby only
	3. issue commit synchronize on primary to recover from mistake
   Success Criteria:
   - Same criteria as for test A in section 2
   Result: Pass.

   Variants: - Start with NSR ON and acivate RIP only on primary (i.e issue 
	     'commit' and not 'commit synchronize'.) Then issue commit 
	     synchronize to recover.
	     - Do steps 1 and 2 above then deactivate RIP on standby and 
	     the deativate RIP on primary and 'commit synchornize' to recover.
	     This succeeds if everything is cleaned up correctly and if 
	     test A in section 2 succeeds subsequently.

B) RIP deactivated on primary only
----------------------------------
    Goal: Show that if user deactivates RIP on primary only and then 
	  re-activates it, replication state will be recovered.
    Test Specific Setup: Setup A
    Test Steps:
	1. Perform the 3 steps in section 2 test A
	2. Deactivate RIP on primary and 'commit' on primary only
	3. issue commit synchronize on primary to recover from mistake
	4. Redo the last 2 steps in section 2 test A
   Success Criteria:
   - After step 3 all handles should be cleaned up (use show task memory detail
     | match rip)
   - Same as for test A in section 2
   Result: Pass.

   Variants: - Start with NSR ON and acivate RIP only on secondary only, then 
	     activate RIP on primary and issue commit synchronize to recover.
	     -  Do steps 1 and 2 above then activate RIP on primary and 
	     'commit synchornize' to recover.

Note that the 2 test cases above only involve having RIP deactivated (have no
active RIP instances or activated to trigger events) and thats because any
other difference in configuration difference (such as having one less neighbor
on either primary or standby, having different export policies, or different 
configured timers) wont cause changes in the RIP IO task and its socket or 
with the creation or delation of the mirror handles. Such misconfigurations
shouldn't cause any problems as long as the user gets back to the same config
on both RE's somehow.

5. REGRESSION TEST CASES
------------------------
Run all regressions for RIPv2 and RIPng while NSR and replication are ON so
that standby RIP code gets put to the test.

6. INTEROP TEST CASES
---------------------
N/A

7. MIGRATION & COMPATIBILITY TEST CASES
---------------------------------------
N/A

8. TEST COVERAGE REMAINING
--------------------------
N/A

9. DEFECTS REMAINING
--------------------
Please see caveats section in the software spec.