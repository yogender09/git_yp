$Header: /cvs/juniper/sw-projects/os/nsr/pim-modular-nsr-fs.txt,v 1.4 2012/03/20 14:25:12 afuellemann Exp $

Process Template J3.02.P05.T01S
PIM Modular NSR Functional Specification

Copyright (C) 2011, Juniper Networks, Inc.

NOTICE: This document contains proprietary and confidential
information of Juniper Networks, Inc. and must not be distributed
outside of the company without the permission of Juniper Networks
engineering.

TABLE OF CONTENTS

Table of Contents
1.	Introduction	
1.1	Document Revision History	
1.2	Reference	
1.3	RLI List	
1.4	Feature Parity Traceability	
2.	Functionality	
2.1	Goals	
2.2	Non-Goals	
2.3	Functional competitive data	
2.4	APIs/Messages	
2.5	CLI Config	
2.6	CLI Commands	
2.7	JUNOScript
2.8	J-Web Quick Configuration and Monitor Screen	
2.9	SNMP	
2.10	Syslog ERRMSG
2.11	Serviceability and diagnose-ability	
2.12	Assumptions	
2.13	Constraints and Limitations	
2.14	Dependencies and Interactions with other Components in the System
2.15	Examples or Interaction Descriptions	
2.16	Free Software Considerations	
2.17	3rd party Software Considerations	
3.	Caveats	
4.	Other Requirements	
5.	Resource Estimation	
6.	Performance	
6.1	Performance Related Resources	
6.2	Target Performance	
7.	Compatibility Issues	
8.	Security Issues	
9.	Platforms Supported	
10.	High Availability (HA)	
10.1	Graceful RE Switchover (GRES), ISSU and NSSU Impact	
10.2	NSR Impact	
11.	Aggregated Ethernet/ SONET/ IRB Support	
12.	SDK Impact	
12.1	SDK Customer Usage	
13.	Services/JSF (JUNOS Services Framework) Impact	
14.	JUNOS Ready Software considerations	
15.	Multi-Chassis Support	
16.	64-Bit Support	
17.	IPv6 Support
18.     Logical System Support	
19.	Notes	
20.	Glossary	
21.	Design Specification exception	
22.	Review Comments	
22.1	Review stakeholder matrix	

1.	Introduction

Non Stop Routing (NSR) attempts to preserve routing control state when there
is a Routing Engine (RE) failover.

In the case of PIM, this is achieved by replicating enough PIM control state
from the master RE to the backup RE to recreate the PIM runtime state on the
backup RE such that it matches that of the master RE.

The current PIM NSR implementation has several structural flaws in it,
which are listed below:

   1) The PIM NSR code is not very readable.  It is very hard to
      determine from just looking at the code which RE it is 
      supposed to be running on.

   2) The data structures used to define the replication database
      (RDB) are defined so that they can be used on the master and
      backup REs.

      This makes it impossible to determine from looking at the 
      structures which RE the code that is manipulating them is
      supposed to be running on.

   3) Some of the RDB data structures are tightly coupled to their
      associated PIM control state.

      This results in the PIM control code having to know too much
      about the RDB state and vice versa.

   4) Some of the TLVs used to replicate state from the master RE
      to the backup RE are unversioned flat data structures.  This
      does not work when the format of these data structures has to
      be changed (ISSU).

These structural flaws are causing the following issues:

   1) A steady stream of PIM NSR related PRs that is consuming 
      engineering resources to deal with.

   2) The NSR code occasionally causes issues to arise in the 
      core PIM code (resulting in more PRs).

   3) There are latent ISSU issues due to unversioned data 
      structures being embedded in the TLVs used to replicate
      state to the backup RE.

   4) The PIM NSR code is not readily extensible.

This RLI will refactor/redesign the existing PIM NSR code to resolve these
issues.  This is an engineering-driven change to improve the maintainablity
and extensibility of the current PIM NSR implementation.

1.1	Document Revision History

  Revision 1.1
    Andy Fuellemann
    12/01/11
    Created.

  Revision 1.2
    Andy Fuellemann
    02/15/12
    Updated with review comments.

  Revision 1.3
    Andy Fuellemann
    03/13/12
    Updated resource usage section.

  Revision 1.4
    Andy Fuellemann
    03/30/12
    Updated with more review comments.

1.2	References

    +-------+-------------------------------------------+---------+--------+
    | RLI   | Description                               | Release | PR     |
    +-------+-------------------------------------------+---------+--------+
    | 2728  | NSR: PIM stateful replication phase 1     | 9.1R1   |  94595 |
    | 6259  | NSR: PIM stateful replication phase 2     | 9.5R1   | 238121 |
    | 8275  | NSR support for IGMP-only interfaces      | 12.3    | 694463 |
    | 11800 | NSR: PIM stateful replication phase 3     | 11.4R1  | 535652 |
    | 12174 | LEAD ACCOUNTS: NSR: Rosen MVPN            | 12.2R1  | 563513 |
    +-------+-------------------------------------------+---------+--------+

    +--------+-------------------------------------------------------------+
    | PR     | Title                                                       |
    +--------+-------------------------------------------------------------+
    | 611113 | pim_nsr_iss_job needs to yield CPU to improve PIM NSR       |
    |        | scalibility                                                 |
    |        |                                                             |
    |        | The current PIM NSR code updates the RDBs in one loop,      |
    |        | which will result in scheduler slips in a sufficiently      |
    |        | scaled setup such as what AT&T uses (~1000+ VRFS) when      |
    |        | doing ISSU.                                                 |
    +--------+-------------------------------------------------------------+

1.3	RLI List

    +-------+-------------------------------------------+---------+--------+
    | RLI   | Description                               | Release | PR     |
    +-------+-------------------------------------------+---------+--------+
    | 17733 | RPD Modularity: rework PIM NSR            | 13.2R1  | 717454 |
    +-------+-------------------------------------------+---------+--------+

1.4	Feature Parity Traceability

Not applicable.

2.	Functionality

No customer visible changes.

2.1	Goals

  1) Reduce the stream of PIM NSR PRs.

  2) Make the PIM NSR code maintainable.

  3) Make the PIM NSR code understandable.

  4) Make the PIM NSR code extensible.

  5) Decouple the PIM NSR logic from the PIM control logic as much
     as is possible given the current PIM design.

2.2	Non-Goals

  1) It is not a goal of this project to extend the existing PIM
     NSR functionality to support new features.

2.3	Functional competitive data

Not available.

2.4 APIs/Messages

Not applicable.

2.5 CLI Config

No new configuration will be added.

2.6 CLI Commands

No new operational commands will be added.

2.7	JUNOScript

No new operational commands will be added.

2.8	J-Web Quick Configuration and Monitor Screen

Not applicable.

2.9 SNMP

Not applicable.

2.10	Syslog ERRMSG

No new syslog or errmsgs will be added.

2.11	Serviceability and diagnose-ability

The current PIM NSR logging frequently logs function calls in addition to
individual RDB record operations.  Additionally when RDB record operations
are logged, the RDB record address is displayed, not the contents.

The existing PIM NSR logging code will be replaced on a per RDB basis to 
display the record contents and actions being taken with each record.

For example:

  PIM nbr bkup re kid 0 ifidx 71 ifn ge-0/2/2.10 nbr 20.1.1.1: resolved

This will reduce the amount of PIM NSR logging and make what is displayed
more useful for debugging purposes.

2.12	Assumptions

None.

2.13	Constraints and Limitations

None.

2.14	Dependencies and Interactions with other Components in the System

None.

2.15	Examples or Interaction Descriptions

None.

2.16	Free Software Considerations

None.

2.17	3rd party Software Considerations

None.

3.	Caveats

None.

4.	Other Requirements

None.

5.	Resource Estimation

When initially synchronizing state between the master and backup REs, a 
substantial amount of additional memory will be used for state replication.
This memory usage will taper off as state is mirrored to the backup RE.

This spike of memory usage will roughly match what is consumed by the 
current PIM NSR implementation.

In a synchronized steady state system, on the master RE, there will be
almost no additional memory usage beyond that which is needed to maintain
PIM protocol runtime state today when NSR is not enabled.

The amount of memory used on the backup RE to support PIM NSR will not 
change with this project.

6.	Performance 

Roughly the same as the current PIM NSR implementation.

6.1	Performance Related Resources

None.

6.2	Target Performance

Slightly more CPU will be consumed as all of the RDB data will be fully
encoded as a sequence of TLVs instead of a mix of TLVs and flat data
structures.

7.	Compatibility Issues

None.

8.	Security Issues

None.

9.	Platforms Supported

The changes for this feature are platform independent.

Development and unit testing will be done on the m10i platform.

To verify that these changes will work on platforms with a different
endianess than the m10i, regression tests should be run on EX hardware.

10.	High Availability (HA)

10.1	Graceful RE Switchover(GRES), ISSU and NSSU Impact

Older releases will mirror some PIM NSR state in a different format.

To support ISSU from older releases, the old format mirrored data will
have to be converted to be stored in the new data structures.

10.2 	NSR Impact

See goals section.

11.	Aggregated Ethernet/ SONET/ IRB Support

Not applicable.

12.	SDK Impact

Not applicable.

13.	Services/JSF (JUNOS Services Framework) Impact 

Not applicable.

14.	JUNOS Ready Software considerations 

Not applicable.

15.	Multi-Chassis Support

RPD is not multi-chassis aware.

16.	64-Bit Support

RPD already has 64-bit support.

17. 	IPv6 Support

PIM NSR already supports IPv6.

18.	Logical System Support

RPD NSR is not supported on logical systems.

19.	Notes

None.

20.	Glossary

ISSU - In Service Software Upgrade

NSR - Non Stop Routing

PIM - Protocol Independent Multicast

RE - Routing Engine

RPD - Routing Protcol Daemon

21.	Design Specification exception

Not applicable.

22.	Review Comments

The tracking PR is 717454.

22.1	Review stakeholder matrix

Function			Name			Required?	Approval State
---------------------------------------------------------------------------------------------------------------
SW1 (RPD)			aasthana		Yes		Approved/Rejected/Approved with actions
SW2 (kernel, RPD, PFE etc)				Yes/No/Optional	Approved/Rejected/Approved with actions
SW3 (kernel, RPD, PFE etc)				Yes/No/Optional	Approved/Rejected/Approved with actions
SW Manager			kdegraaf		Yes		Approved/Rejected/Approved with actions
JAB							No		Approved/Rejected/Approved with actions
Systest							Yes		Approved/Rejected/Approved with actions
Tech-pubs						Optional	Approved/Rejected/Approved with actions
JTAC							No		Approved/Rejected/Approved with actions
HW							No		Approved/Rejected/Approved with actions
---------------------------------------------------------------------------------------------------------------

Copyright 2011 Juniper Networks, Inc. -- Proprietary and Confidential

Do not distribute outside of the company without the permission of
Juniper Networks engineering.  Printed copies are for reference only!
 
