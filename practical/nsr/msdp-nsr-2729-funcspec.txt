$Id: msdp-nsr-2729-funcspec.txt,v 1.6 2011/03/09 17:15:22 aasthana Exp $

                  NSR: MSDP stateful replication
                    Functional Specification

                  Abhishek Asthana <aasthana@juniper.net>

Copyright (C) 2009, Juniper Networks, Inc.

NOTICE: This document contains proprietary and confidential
information of Juniper Networks, Inc. and must not be distributed
outside of the company without the permission of Juniper Networks
engineering.

1.  INTRODUCTION

This functional spec addresses the requirements of RLI 2729. (MSDP-NSR)

1.1 MSDP Overview

Multicast Source Distribution Protocol (MSDP) is a protocol designed by ISPs
to interconnect multicast routing domains. It is typically run on the same
router as the PIM Sparse-Mode Rendezvous Point (RP).

Each MSDP router will establish adjacencies with internal and external MSDP
peers in a fashion similar to BGP. The purpose of these peering relationships
is to inform each other about Active Multicast Sources within the domain or
across domains. Once the peer RPs learn about the Active Multicast Sources,
they can send PIM Sparse-Mode explicit join messages to the remote source.

MSDP establishes peer adjacency on TCP connections. The peer with the higher
IP address will passively listen to a well known port number and wait for the
side with the lower IP address to establish a connection. 

When an MSDP router becomes aware of a new local source, it sends
Source-Active messages to its MSDP peers. When a SA message is received, a
peer RPF check is done to make sure this peer is towards the originating RP.
If not, the SA message is dropped.

SA messages are periodically refreshed approximately once 60 seconds. 

References:

MSDP Functional Specs:
http://cvs.juniper.net/cgi-bin/viewcvs.cgi/sw-projects/routing/multicast/msdp/funcspec.txt?rev=1.9&view=log

MSDP Design Specs:
http://cvs.juniper.net/cgi-bin/viewcvs.cgi/sw-projects/routing/multicast/msdp/designspec.txt?rev=1.3&view=log

1.2 Need for MSDP NSR

NSR aims at allowing failover between the master RE and the secondary RE on a
router without causing disturbance in the network (i.e without the peer
routers noticing this failover). Thus, for every protocol specific state
information needs to be replicated on the secondary RE so that when the
switchover happens the rpd on the secondary can keep up the flow of
protocol-specific messages to the peers.

For MSDP, a Router receives periodic Source-Active(SA) from its peers.
From this SA Router gets the information about Active Sources in the network.
Router uses this information to distribute Multicast traffic to interested
multicast listeners in its PIM Domain. Router also forwards this information
to its peers in same/different Domain.

Additionally when Router comes to know about a Source becoming Active, via
register packet, it originates a SA message and send it to its MSDP Peers.

All SA messages seen on the Master RE will should be seen on Backup RE.
This will allow the Backup to keep the same picture of the network as the
Master and thus be able to take over when switchover is performed.

MSDP forms adjacency with peers on TCP Connections. This connection related
information needs to be replicated to Backup RE. If information about
connections related parameters is not replicated, on switchover New Master
will not have any information and will try to create fresh adjacency, network
will get disturbed and connections will timeout, peers will drop adjacency
with this neighbor.

MSDP Master RE states to be replicated and verified on Backup RE : 
a. Configuration (This will be taken care by chassisd)
b. MSDP Peer (MSDP Peers are configuration peers, these need not be
replicated, backup will learn then while parsing configuration)
c. MSDP Peers Socket Information (This will include TCP-Socket Replication)
d. Source-Active's and related information and States (These will be learned
by Backup RE from network, this information will NOT be replicated)

Chassisd will make sure that the configuration is replicated to Backup RE. Both
the RE's will independently parse the configuration and will form initial
states. 

Like BGP, MSDP Peers are learned via configuration. Peers are formed while
parsing configuration. Master RE will open a separate socket connection for
each of the configured MSDP Peer. For MSDP NSR these sockets created on Master
needs to be synced with Backup.

The MSDP routing protocol is implemented in RPD using an RPD task and socket
per peer.

1.2: References

The following are related specs to this RLI 2729:

RLI Page:
    https://deepthought.juniper.net/app/do/showView?tableName=RLI&record_number=2729
PR Page:
    https://gnats.juniper.net/web/default/572316

2. Functionality

2.1 Goals
Support NSR for existing MSDP implementation.

2.2. Non-Goals
Solve existing MSDP issues.

2.3 Features description

    Consider the following topology for MSDP-NSR.

              Src1+------------+R1
                               /  \
                              /    \
                             /      \
                            /        \
                           /          \
                          /            \
                         +              +
                        R2+------------+R3
                         |              | 
                         |              | 
                         |              | 
                         |              |
                         +              +
                     Src2/Recv2     Src3/Recv3  

     (a) The Routers R1, R2 and R3 are RP/DUTs. They are all enabled with NSR. 
     (b) Src# sends traffic
     (c) Recv# sends Joins (Interested receivers)

Here R1, R2 and R3 form MSDP peering with each other. This peering is made up
on TCP connection in which control information is exchanged.

When R1 first learns of a sender Src1, e.g., via PIM register messages, it
constructs a "Source-Active" (SA) message and sends it to its MSDP peers R2
and R3. R2 and R3 populates its data structures with the information about
Active Sources available. Incase R2/R3 has a downstream interested listener,
they will trigger a Join source and start forwarding traffic.

Inorder to allow a successful switchover, states on R1, R2 and R3 Master REs
needs to be replicated to respective Backups. Information about TCP
connections and Active Multicast Sources are needed on the Backup RE.

If the information about TCP connection is not synced and failover is
performed, Backup RE will not have peer TCP connection socket information,
peer will drop adjacency. New TCP connections will have to be established with
each peer. This will cause disruption in the network. 

Incase TCP socket information is replicated to the Backup RE, after failover
New Master RE will have peer socket information, peers will not drop adjacency.
New Master will continue using existing connections. 

MSDP is a soft state protocol and SA messages gets refreshed every 60secs.
Even if, SA are not replicated information is going to get synced in maximum of
60secs. 

If socket are replicated, both the RE's will receive and process MSDP packets.
Backup RE will read all the MSDP packets from the network, including the SAs
which Master RE Originates. Backup RE will not process there SAs. However
Depending on Peer-RPF check Backup RE will process the SAs it receives from its
peers.

Eventually, Both RE's will build their databases and protocol states
independently. It is assumed that because both RE's have exactly same
configuration and they receive similar information from the network, they will
populate similar Data Structures and Protocol States.

NOTE: Syncing of Sockets will be done as a part of initial state sync while SA's
will be learnt from network. SAs will not be replicated. 

Above implementation is similar to RIP protocol. RIP protocol does not sync
Route UPDATE Messages between RE, Backup is dependent on network to learn this
information. RIP have refresh time of 30secs.

At the time of performing switchover if socket and SAs are synced between
Master Backup, there will be no outage and the traffic flows will not be
affected. As Backup RE will maintain all the state and timers as on Master, it
will smoothly take over mastership. There will be no disruption visible externally.

Implementation does not guarantee behavior of the Protocol, incase of forced
switchover, until Socket and SA's are in sync between Master and Backup RE's.

Sockets will be replicated to backup as soon as a new peer is formed or as
part of initial state replication, if Backup comes up later than Master. In
Normal scenarios sockets replication will be almost immediate, however there
can be some delays in population of SA states on Backup. This delay is because
Master does not replicate SAs to Backup. 
Backup receives SAs from the network and populate its Data Structures
accordingly. SA's are seen on the network at a interval of 60 seconds (SA
Refresh time).

Kindly refer to Caveat Section for this case.

2.4 CLI

2.4.1 CLI Config

One new Trace Option Flag will get added as part of this RLI.

a. set protocols msdp traceoptions flag synchronization

regress@pro-bng-mc2-h# show protocols msdp
traceoptions {
    file rip.log size 8m world-readable;
    flag update;
+   flag nsr-synchronization;
}

b. Hidden CLI knob and show command  

- "set protocol msdp nonstop-routing-disable"
  This hidden knob is to disable MSDP NSR. 
  If this knob is configured Socket replication will not be done 
  between Master/Backup RE.

- "show msdp socket": 
  This hidden command is used to display MSDP Peer socket Handle. 
  Command is available on both Master/backup RE.

2.4.3 JUNOScript
    -NA-

2.4.4 J-Web Quick Configuration and Monitor Screen
    -NA-

2.4.5 SNMP
    -NA-

2.4.6 Syslog - ERRMSG
    -NA-

2.5 Assumptions
    -NA-

2.6 Constraints and limitations
    -NA-

2.7 Dependencies and interactions with other components in the system
    -NA-

2.8 Examples or interaction descriptions
    -NA-

2.9 Free software considerations:
    -NA-

3. PATENT OPPORTUNITIES
    -NA-

4. CAVEATS

I.
Initial replication will not replicate MSDP SA's. Backup RE will learn Active
Source information from the network by procession SA messages. This sync may
take maximum of 60secs. (SA Refresh Time) 

If a switchover is performed and before SA is seen on the network by the new
Master, a downstream Receiver becomes active, there will be some delay in traffic
flow within the PIM Domain. However this will not be more that 60secs and as
soon as SA is seen on the network states will quickly converge.

Consider the Topology as below:
 
 Src+-----------+R1------------+R2+------------+Recv

Router R1, R2 are MSDP Peers(Same or Different PIM Domain)
R1 is connected to Multicast Source, it becomes SA originator when Source
becomes active. This SA message is sent to R2 which updates its SA states
using this information.

Case 1: If SA's are received by both RE's(Master/Backup) on R2. Both the
RE's will populate the Active Source information in there data structures on
switchover New Master R2 will honor and will send traffic downstream in Recv
becomes active. (This all happens before next SA is seen on the Network).

Case 2: After SA is received on Master RE, Backup RE comes up. Initial
replication of Sockets will be done.(Backup RE will not have any information
about the Active Sources). At this time a switchover is performed and before
next SA is seen on the network, Recv becomes active. New Master will not have
any information about Active Sources, traffic flow to Recv will take some time
to start.(It starts only after SA is seen by New Master).  

Kindly note that the above scenario will affect only new flows. PIM Protocol
running on the RE will take care of existing flows and they will not be
disturbed.

To avoid above scenarios implementation will not allow Administrator to
trigger a planned switchover for 60seconds after initial replication of
sockets is done(When Backup connection becomes Active). This time will be 
sufficient for SA's to get refreshed on the network and for Backup to populate 
its Data Structure appropriately.

In existing infrastructure implementation, for planned switchovers, system
does not allow two switchovers to happen within 240 seconds of eachother.
New Backup is gets sufficient to start and get in sync with Master.

This implementation on similar lines as RIP NSR which dosent allow planned
switchover for 20 seconds after its initial Socket replication.  

II. 
ECMP links between MSDP Peers.
        +-----+                 +-----+                 +-----+
        |     |-------ifl-1-----|     |                 |     |
        | R1  |                 | R2  |-------ifl-3-----| R3  |
        |     |-------ifl-2-----|     |                 |     |
        +-----+                 +-----+                 +-----+
        1.1.1.1                 2.2.2.2                 3.3.3.3

        R1 has MSDP Peering with R2, R2 has MSDP Peering with R3
        R1 and R2 have ECMP links between them.

Case: R1 Receives SA message originated by R3
R1 will receives a SA message originated by R3 via R2. On receiving SA massage
R1 does Peer-RPF check for this SA.

In current implementation R1 will look into unicast routing table for the
nexthop ifl towards R3 (originator of the SA) and ifl towards R2 (MSDP Peer
forwarding the SA). If these two ifls are same Peer-RPF Peer check passes.

Incase of ECMP links, unicast routing may select different ifls in above case.
This will lead to failure of Peer-RPF Check.

This will break Protocol behavior. Protocol will work fine if nexthop ifls
selected towards originator and peer are same. 

In above case if on R1 unicast selects ifl-1 as nexthop towards R2 and ifl-2 as
nexthop towards R3, RPF check for SA originated by R3 will fail. 

Both Master/Backup RE can run into this issue. 

On R1, MSDP-NSR, Backup will run its own algorithm and will select its
own unicast route ifls towards R2 and R3. As long as the Backup selected ifls
for SA-Originator and MSDP Forwarding Peer are same Peer-RPF check on Backup
will pass. It does not matter even if Master have selected another ifl towards
R2 and R3. 

This issue will be fixed as base MSDP Protocol issue and will not fall in
scope of this RLI-2729 (MSDP-NSR).

III. 
In existing implementation we do have have support for Multicast-NSR under VRF.
Hence, MSDP-NSR under VRF will not be supported as a part of this RLI effort.
However a generic framework will be written, which can be used for MSDP-NSR
under VRF in future.

IV.
NOTE: MSDP Protocol related issues will not be fixed as part of this RLI
effort. A separate RLI-14974 has been created for the same. 

5.  OTHER REQUIREMENTS
    -NA-

6.  IMPLEMENTATION DETAILS

6.a. MSDP Replication 

This RLI will sync peer socket information to the Backup RE. Source-Active
messages will not be synced.

Following needs to be done as part of this RLI
    1. MSDP module needs to be initiated on Backup
    2. Mirroring framework needs to be written for MSDP 
    3. JSR infrastructure will be used to replicate socket information with
    the backup RE

I. Initializing MSDP Module on Backup RE

@@ -2280,6 +2280,18 @@ static const struct modules module_inits_backup[]
#ifdef PROTO_MSDP
    {
       .module_id      = RPD_MODULE_MSDP,
       .init           = msdp_init,
       .var_init       = msdp_var_init,
       .config_pass    = 3,
       .config         = msdp_global_config,
       .if_replay_done = NULL,
       .name           = "MSDP",
       .dyn_config_bits= DYN_CONFIG_BIT_NONE
    },
#endif /* PROTO_MSDP */

II. Mirror framework for MSDP Module

static mirror_registry_entry msdp_session_mirror_registry = {
    .mirror_data_lock_func = msdp_mirror_session_lock,
    .mirror_data_unlock_func = msdp_mirror_session_unlock,
    .mirror_data_encode_func = msdp_mirror_session_encode,
    .mirror_data_decode_func = msdp_mirror_session_decode,
    .mirror_no_resync = 1,
    .mirror_connection_status_change_func =
                        msdp_mirror_connection_status_cb,
    .mre_data_id = MIRROR_DATA_MSDP_SESSION,
    .mirror_db_type = MIRROR_DB_BOTH,
};

static void
msdp_mirror_register_clients(void)
{
    /* Register Mirror Clients(calbacks) */
    mirror_register_data(&msdp_session_mirror_registry);
}

void
msdp_nsr_create_context(void)
{
    msdp_rdb_init();

    /* Register PIM mirror clients with Mirroring API */
    msdp_mirror_register_clients();
}

int
msdp_mirror_session_encode(const mirror_data_node *mirror_node,
                           byte *buf, u_int bytes_left)
{
    int length;
    if (task_re_mode_master){
        length = 
            msdp_mirror_session_encode_func_master(mirror_node,
                                           buf, bytes_left);
    } else {
        length =
            msdp_mirror_session_encode_func_bkup(mirror_node,
                                            buf, bytes_left);
    }
    return length;
}

void
msdp_mirror_session_decode(const mirror_recvd_data *recvd_data)
{
    if (task_re_mode_master){
        msdp_mirror_session_decode_func_master(recvd_data);
    } else {
        msdp_mirror_session_decode_func_bkup(recvd_data);
    }
    return;
}

III. JSR API's Handling for socket replication.

JSR infrastructure takes care of replicating socket information between RE's.
When JSR infrastructure becomes Active, all the registered protocols are
intimated by a callback function.

When MSDP Master receives a JSR State Active callback, it triggers syncing of
socket states with Backup RE. 
1. Master RE calls task_jsr_alloc() API, which returns Master with a Primary
Socket Handle. Master RE replicates this Primary Socket Handle to Backup RE
using lib-mirror API's. 
2. Backup RE uses this Primary Socket Handle mirrored from Master and
initializes JSR task on Backup RE calling API task_jsr_secondary_init(). This
in turn returns Backup RE with a Secondary Socket Handle. Backup RE replicates
this Secondary Socket Handle back to Master RE using lib-mirror API's.
3. Once Master RE has both the Socket Handles (Primary and Secondary) it calls
API task_jsr_replicate() to replicate the socket.

           Master RE                          Backup RE
          -----------                       -------------     

1.    Pri_Han = task_jsr_alloc();    
2.    mirror_add(Pri_Han);
3.                                      Sec_Han =
                                          task_jsr_secondary_init(Pri_Han);
4.                                      mirror_add (Sec_Han);
5.    task_jsr_replicate(Pri_Han, Sec_Han);

6.b Mirroring Peer Socket Information Replication

MSDP creates a TCP socket connection for each of its peers. Hence for MSDP
NSR replication of Socket Handle needs to be accompanied with the MSDP Peer,
which Peer to associate this socket handle with.
MSDP Peer lookup keys need to be sent in mirror Packet to Backup (Instance-ID
and Peer-ID forms key for MSDP Peer lookup). With this information, Backup will
be able to know which Peer to associate replicated Socket Handle with.

For each of the socket to be replicated Mirror Packet will contain following
fields in its TLV's.

Mirror Packets will be replicated per Peer Connection. 

         ---  Mirror Packet ---        
+---------------------------------------+
|      Type         |      Length       |
+---------------------------------------+
|             Msdp Instance Name        |
+---------------------------------------+
|               Msdp Peer Addr          |
+---------------------------------------+
|          Peer Socket JSR Handle       |
+---------------------------------------+

int
msdp_mirror_encode(const mirror_data_node *mirror_node,
                           byte *buf, u_int bytes_left)
{
    int length = 0;
. . .

    /* Add the Socket ID to be Replicated */
    if (!rpc_proto_build_complete_tlv20(&cur_tlv, RPC_TLV_DATA_VARIABLE, 
                                        &bytes_left, &length, 
                                        MSDP_MIRROR_TLV_SESSION, 
                                        &msdp_session_rdb, 
                                        sizeof(msdp_session_rdb))){ 
        return 0;
    }

    return length;
}

6.c MSDP Clear Peer/Statistics Command

Clear Peer command clears all the SA's for a MSDP Peer/s. 
Clear statistics command clear all MSDP statistics.  

These commands will be available on Both RE's. 

When MSDP clear command to clear peer/s is executed on a RE, MSDP will clear
all the SA's/Stats associated with MSDP Peer on that perticular RE.

Executing clear command on Master RE will not clear SA/Stats from Backup RE
because this information was not mirrored. Backup RE has learned this directly
from Network.

This implementation is similar to BGP Protocol.

7
  PERFORMANCE
Current implementation of MSDP supports upto 30peers and 1K SA's. 
MSDP-NSR feature will continue to support these scaling numbers.
Implementation will make sure that the performance will not be affected.

7.1.  Performance Related Resources
    -NA-

7.2.  Target Performance
    -NA-

8.  COMPATIBILITY ISSUES

For MSDP NSR to work, both REs should support MSDP NSR. If one of the REs does
not support MSDP NSR, then the feature shall be as good as disabled.

9.  SECURITY ISSUES
    -NA-


10.  PLATFORMS SUPPORTED

11. Graceful RE Switchover (GRES), Hobson or ISSU Impact 
    Implementation will take care that MSDP-NSR Supports ISSU.
    There will be no impact because of this feature.

12.  NSR Impact
    This RLI is a NSR related RLI. So, no separate impact. 

13. Aggregated Ethernet/SONET Support
    -NA-

14.  SDK Impact
    -NA-

14.1 SDK Customer Usage
    -NA-

15. Services / JSF (JUNOS Services Framework) Impact
    -NA-

16. MULTI-CHASSIS SUPPORT
    -NA-

17. 64-BIT SUPPORT
    -NA-

18.  NOTES
    -NA-


19.  GLOSSARY
IGMP    Internet Group Management Protocol
MSDP    Multicast Source Discovery Protocol
NSR     Non Stop Routing
PIM     Protocol Independent Multicast
RE      Routing Engine


[NSR]         Non-Stop Routing (NSR) - Functional specification
              sw-projects/os/nsr/software_spec_3083.txt
[PIM-NSR]     NSR: PIM stateful replication - Functional Specification
              sw-projects/os/nsr/pim-nsr-funcspec.txt
[PIM-NSR-DS]  NSR: PIM stateful replication - Design Specification
              sw-projects/os/nsr/pim-nsr-designspec.txt
[PIM-SM]      Protocol Independent Multicast - Sparse 
              Mode (PIM-SM): Protocol Specification (Revised). RFC4601.

20.  REVIEW COMMENTS
