$Header: /cvs/juniper/sw-projects/os/nsr/rpd/bgp/graceful-restart/funcspec.txt,v 1.1 2008/01/02 20:21:21 srik Exp $

        NSR: Graceful Restart helper mode support of BGP neighbors 

                Functional & Design Specification

        Author: Srikanth Seshadri <srik@juniper.net>

Copyright (C) 2007, Juniper Networks, Inc.

NOTICE: This document contains proprietary and confidential
information of Juniper Networks, Inc. and must not be distributed
outside of the company without the permission of Juniper Networks
engineering.


1.  INTRODUCTION

When nonstop-routing is configured on a router, the current BGP implementation
doesn't have the ability to provide receiving-speaker (graceful-restart helper)
support for peers that support graceful-restart functionality. In the event
of a BGP peer router failure, although the peer router has the capability
to support Non Stop Forwarding, we would end up routing the traffic around 
the faled peer and cause undue stress on the control plane of the network
due to the peer flap and the subseuent reconvergence.

[JUNOS-BGP-GR] describes the BGP graceful-restart functionality and the JUNOS
implementation.

[BGP-GR] is the RFC describing the gracefl-restart feature itself and
describes the advantages of supporting the receiving-speaker (helper mode) 
capability.

Note: The words "bgp receiving-speaker functionality" and "bgp
graceful-restart helper mode functionality" has been used interchangeably
and they mean the same (as described in [BGP-GR] under bgp receiving-speaker).

Traceability information

    Target product        : JUNOS
    Target JUNOS release  : 9.2R1
    RLI                   : 3776
    NPI Program           : 326 JUNOS Non-Stop Routing (NSR)
    Tracking PR           : 262208 

Referenced documents and RLIs

    [BGP-GR] "Graceful Restart Mechanism for BGP" under RFC 4724 at
    http://www.ietf.org/rfc/rfc4724.txt", January 2007.

    [JUNOS-BGP-GR] "JUNOS BGP graceful-restart implementation" under
    sw-projects/routing/bgp/graaceful-restart/funcspec.txt

    [JUNOS-BGP-NSR] "JUNOS BGP nonstop-routing implementation" under
    sw-projects/os/nsr/bgp-design.txt


2.  FUNCTIONALITY

2.1 Goal
--------
The BGP graceful-restart helper mode has been already implemented and is
available when "graceful-restart" mode is configured under routing-options.
The goal of this RLI is to provide the the receiving-speaker functionality when 
"nonstop-routing" mode is configured under routing-options. 

2.2 Non-Goal
------------
During a graceful-restart situation (while we're in the middle of providing
graceful-restart helper functionality to a restarting BGP speaker), 
the graceful-restart helper mode functionality is terminated during an
RE switchover on our end.

In such a situation, traffic loss could occur and we would end up re-routing
traffic around the peer until the network re-converges. Note that such
a behavior would not lead to any inconsistent/stale state in forwarding.
Such state would be re-conciled with the network state.

This behavior is similar to the IGP behavior.

2.3 Configuration
-----------------
When "nonstop-routing" is configured, there is no explicit configuration 
required to enable this functionality. This behavior is identical to other 
IGP protocols (eg. ospf).

BGP would advertise graceful-restart capability without including any
<AFI, SAFI> in the capability indicating that we support the procedures
for the Receiving Speaker.

Disabling Graceful-Restart helper mode
--------------------------------------
If required, we can disable graceful-restart helper mode functionality
from a router configured with nonstop-routing. This can be done with
the use of the existing CLI commands used to disable the graceful-restart
functionality.

For example:

regress@pro9-c# show routing-options 
nonstop-routing;
autonomous-system 200;

regress@pro9-c# show protocols bgp 
group ibgp {
    type internal;
    neighbor 5.5.5.3 {
        local-address 5.5.5.1;
        graceful-restart {
            disable;            <-------
        }
    }
}

This "graceful-restart disable" command can be configured under 
"protocols bgp", "protocols bgp group <group-name>" or "protocols bgp group
<group-name> neighbor x.x.x.x" hierarchies with the more specific configuration overriding the less specific one.

3.  CAVEATS

None at this time.


4.  OTHER REQUIREMENTS

The solution should interoperate with other vendors. (offer support for
receiving-speaker functionality to speakers which whom we've negotiated
graceful-restart capability).

{As necessary, outline the general implementation requirements *not*
covered in the project requirements (RLIs, etc.) and call out any
specific additional requirements for protocols, edge cases, etc.  If
there is a significant amount of the latter then you should break this
section down in to subsections.}


5.  IMPLEMENTATION DETAILS

The implementation will be as described under the receiving-speaker
section in [JUNOS-BGP-NSR].

5.1 Staling/Cleaning state
--------------------------
The Master RE will will drive the receiving-speaker state machine (staling
the prefixes learnt from the peer, starting the timers, etc.). The Backup
RE behaves as if there's no graceful-restart configuration, similar to
the behaves today. It cleans up RIB-IN state for this peer and resets
the advertisement queue for the peer (RIB-OUT state).

5.2 Session re-establishment
----------------------------
The attempt to re-establish the BGP session with the peer is driven
by the Master and is co-ordinated with the Backup with ESTAB/ESTAB-ACK
messages.

5.3 Re-building RIB-IN/RIB-OUT state
------------------------------------
When the BGP session with the restarting peer is re-established, the Master
would re-announce all the bestpaths to the peer. RIB-OUT state would be
built on both the Master and the Backup. The peer eventually re-advertises
its bestpaths and the Master would unstale the prefixes received from
the peer previously marked stale state. This also causes the RIB-IN state to be
built in the Master and Backup.

5.4 Purging stale routes
------------------------
When we receive an EOR from the peer or when the stale-routes-time has
passed, the Master purges the stale routes. This causes the kernel to remove
the stale routes and the PFEs to get notified of route deletion. 
The Backup kernel learns about the route-deletion through ksyncd messages.
The Backup rpd gets notified by the Backup kernel about these route-deletions
causing the backup rpd to remove the associated phantom entries for those
routes. Master BGP re-computes new bestpaths if required due to deletion
(or addition) of paths from the restarting speaker and builds RIB-OUT
state and sends out new updates to other peers. the Backup updates its
RIB-OUT state by snooping the updates send by the Master.

5.5 Switchover post restart-completion
--------------------------------------
If a RE switchover happens after the steps in section 5.4 is complete,
there's no graceful-restart associated work related to the restarting
peer pending after the Switchover.  The New Master BGP re-computes the 
bestpaths and re-conciles with krt and kernel/PFEs. Assuming no topology
changes, the bestpaths match the phantom entries and the phantom entries are
removed. The forwarding doesn't need to be updated and new new updates
need to be generated.

5.6 Switchover during restart
-----------------------------
A Switchover can happen during various phases of graceful-restart.

5.6.1 Prior session re-establishment
------------------------------------
graceful-restart helper mode is not supported in this case since the
Backup BGP doesn't maintain any state related to graceful-restart. The
behavior is similar to a session flap with a BGP peer with no graceful-
restart capabilities. The RIB-IN state is cleared, new bestpaths are
recalculated which may lead to routing around the peer until the
network re-converges.

5.6.2 Post session re-establishment
-----------------------------------
The Switchover could occur at the following situations:

5.6.2.1 Prior EOR/stale-route-timer expiriry
--------------------------------------------
The Backup has cleaned up the RIB-IN state due to the peer flap and is in 
the process of re-learning RIB-IN state since it is unware of graceful-restart 
procedures. Upon Swithover the bestpath calculation takes place with the
current RIB-IN as learnt at that time. Upon reconcilation with the hardware,
the routes that haven't yet been announced by the peer are purged prematurely
before the peer has send the EOR or the stale-route-timer has expired.
This could lead to routing around the peer until we re-converge after
re-learning all the routes from the peer.


5.6.2.2 Post EOR/stale-route-timer expiriry
-------------------------------------------
This is very similar to section 5.5. If the peer has re-announced the
complete set of routes as before the peer flap, the Standby has now built
the complete RIB-IN state. Upon Switchover and bestpath calculation,
the new Master finds the bestpaths to be already downloaded to the hardware
and the updates already send out to the peers. If there were routes that
needed to be purged from the hardware, they'd happen post the Switchover.

5.7 Possible enhancements
-------------------------
This section describes a possible solution to prevent the traffic loss
that could occur for the condition described in section 2.2. This is not
targed for the current release, but can be evaluated in the future in
case the described situation needs to be addressed.

The Backup's implementation can be changed as follows:
- the backup is aware that the peer supports graceful-restart
- On a peer flap, it marks the route "stale" similar to the Master instead
  of deleting the RIB-IN state
- The backup starts the restart-timer. If the BGP session establishes before the
  restart-timer fires, the restart-timer is canceled. If a Switchover occurs
  before the restart-timer fires, the receiving-speaker procedures are
  continued on the new Master.
- If the session gets established before the restart-timer fires, the stale-
  route-timer is started. If the EOR is received from the peer before the
  stale-route-timer expires, the stale-route-timer is canceled. When
  the Master's stale-route-timer expires, its communicated to the Standby
  through by a  STALE_TIMER_EXPIRED message through the Master-Backup control 
  channel. If the stale-route-timer is still running on the backup at this
  time, its canceled. This message causes the backup to clear its stale routes
  from the RIB-IN (similar to the Master's behavior). If a Switchover wile 
  the backup's route-stale-timer is running, the new Master continues with 
  the procedures of the receiving-speaker. If the backup's stale timer expires 
  before the EOR is received and the STALE_TIMER_EXPIRED message is received,
  there's no action done. This means that the backup's stale-route-timer
  expired before the Master's and the STALE_TIMER_EXPIRED message is
  expected shortly or a Switchover could occur shortly. The purging of
  stale routes in this case is delayed until the STALE_TIMER_EXPIRED mesage
  or the Switchover, whichover occurs first.

6.  PERFORMANCE

None.

7.  COMPATIBILITY ISSUES

None.

8.  SECURITY ISSUES

None.

9.  Graceful RE Switchover (GRES), Hobson or ISSU Impact 

GRES and ISSU supported. Please refer to section 2.2 (non-goal) which
describes a situation when traffic loss could occur. 

Supported on TX.

10. NSR Impact

None. Please refer the non-goal section (2.2).

11.  Platforms Supported

All Platforms that support NSR.

12.  SDK Impact

None.

13.  NOTES

None.

14.  GLOSSARY

{As necessary, define any terms or acronyms used.}


15.  REVIEW COMMENTS

{We use the audit trail of the RLI tracking PR to record review comments,
so please include a pointer to the pr here. If the spec review is done
via email, the owner of the spec will send it out for comments with
"bugs@juniper.net" included on the To: or CC: line and the Subject:
containing "<catagory>/<tracking pr number>:", as shown below:

Subject: PR 12345: Code review for new frombitz feature

More info on valid Subject: line formats can be found ati:
http://www-in.juniper.net/useful_info/gnats-faq.html
All the reviewers have to do is reply to the email with their review 
comments, making sure "bugs@juniper.net" is in the To: or CC: and their 
comments will be automagically archived to the pr. In the case of a meeting 
to review the specs, the owner will add the review comments to the audit
trail of the tracking pr themselves. Review comments would include who
attended the meeting and the input provided by the reviewers.

When the owner updates the spec in cvs, they include the changes
made and the tracking pr number in the commit log, something like:

   pr: 12345
   Comments:

   Updates from spec review:

   - add description of ucode changes (jdoe)
   - remove the "annoy user" config command (bsmith)
}
